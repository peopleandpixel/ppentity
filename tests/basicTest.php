<?php

use PHPUnit\Framework\TestCase;
use ppEntity\BasicEntity;

class BasicTest extends TestCase {

    protected static bool $initialized = FALSE;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        if (!self::$initialized) {
            if (!file_exists(__DIR__ . '/../data')) {
                mkdir(__DIR__ . '/../data');
                chmod(__DIR__ . '/../data', 0777);
            }
            if (!file_exists(__DIR__ . '/../data/testdb.sqlite')) {
                touch(__DIR__ . '/../data/testdb.sqlite');
                chmod(__DIR__ . '/../data/testdb.sqlite', 0777);
            }
            file_put_contents(__DIR__ . '/../.env', "DB_TYPE=sqlite\nDB_PATH=" . __DIR__ . '/../data/testdb.sqlite');
            self::$initialized = TRUE;
        }


    }

    public function testInitialize() {
        // Initialize object
        $myObj = new ppEntity\BasicEntity("test");
        // check if initializations worked
        $this->assertNotNull($myObj);;
        $this->assertTrue($myObj->isInitialized());
        // check if bean name was correctly passed
        $this->assertEquals("test", $myObj->name);
        // set some values
        $myObj->value1 = 'A String';
        $this->assertIsString($myObj->value1);;
        $this->assertEquals('A String', $myObj->value1);
        $myObj->value2 = 123;
        $this->assertIsInt($myObj->value2);
        $this->assertEquals(123, $myObj->value2);
        // save object
        $myObj->save();

        // save id for later
        $id = $myObj->id;

        unset($myObj);

        // now load object and check if values are correct
        $myObj = new ppEntity\BasicEntity("test", $id);
        $this->assertNotNull($myObj);;
        $this->assertTrue($myObj->isInitialized());
        $this->assertEquals("test", $myObj->name);
        $this->assertIsString($myObj->value1);;
        $this->assertEquals('A String', $myObj->value1);
        $this->assertIsString($myObj->value2);
        $this->assertEquals('123', $myObj->value2);



    }


    public function tearDown(): void {
        self::$initialized = FALSE;
        unlink(__DIR__ . '/../data/testdb.sqlite');
        unlink(__DIR__ . '/../.env');
        parent::tearDown();
    }
}